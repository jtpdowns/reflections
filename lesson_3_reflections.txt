When would you want to use a remote repository rather than keeping all your work local?

    I would want to keep a remote copy of my work as a more permanent and public backup. If my computer were damaged, I could retrieve my files without any problem. Also, if I or anyone else working on a different machine wanted to contribute to my work, a remote repository would greatly aid in this.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

    If multiple people were working on the same remote repository, any addition of broken code would affect everyone if Git automatically backed up. This would be a problem even for different, not necessarily broken code. Git chose manual, and it's pretty consistent about it.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    These are links between sets of commits in each case. Forks are GitHub-GitHub links, clones are GitHub-local links, and branches are local-local links. Working locally, I would have no choice but to use branching only. If I were contributing to a project or not bothering to remotely back up my own work, I might use clone directly to borrow from a repository. If I wanted to alter or play with someone else's code, I would use a fork. 

What is the benefit of having a copy of the last known state of the remote stored locally?

    If you choose to work offline for a time, you may wish to eventually bring your version up to date. Furthermore, having a version of the remote stored locally can provide you with a release version of your software that you can toy with. It also provides an added layer of backup.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    Without Git or GitHub, I could still use emails of .zip files, Google docs, or Subversion. All of these lack finess. Namely, .zip files provide no single synced version of the code, and both of the others would cause other changes to interfere with my own. I prefer Git as an option.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

    Although only working in master would be simpler in terms of the number of commands involved, having separate branches allows you to more easily and cleanly partition the labor on a project. It also lets you keep a clean copy as a release.






What happens when you initialize a repository? Why do you need to do it?

    When I initialize a git repository, the .git folder is created. However, no files are added to the index, and no commits are made. This is because I need to choose which files to add to the index and which changes in the repository I want to track long-term.

How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area is an area where things can be added and removed freely between the working directory and the repository. It can get messier than either other area, without causing problems, for that reason. I think it helps to select and prepare commits and gives the opportunity to build them.

How can you use the staging area to make sure you have one commit per logical change?

    Since you can select the elements to add to your changing area, you can only place in those elements that constitute a logical change. If you place too many in, you can prune out excess elements with git reset.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    Branching could help to keep snapshots of working code marked. It would givethe opportunity to structure releases of code more easily. Branches would help by serving as labels and letting you mark specific changes that you wanted to add. Feature branches could help you focus on particular fixes, while user branches could help multiple people avoid stepping on one another's toes.

How do the diagrams help you visualize the branch structure?

    These diagrams help to visualize the graphical nature of Git. It is very clear that the commit parenthood is just a directed edge, and speaking about commits in terms of graph theory gives us access to algorithms like depth-first search to find all reachable commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    When both branches are merged, the commit history is no longer a tree. One of the commits acquires the changes of the other, and then it gets both parents. This allows additional features to be added, but it really complicates the commit graph. We represent the result the way we do because that is an accurate representation of the commit history. The result would be incomplete without both parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    Git's automatic merging obviously relieves the user of the burden of merging manually. However, in some cases, the algorithm of choice for merging might not do what a user really wants or intends. With manual merging, it is impossible to avoid directly engaging with the code to at least some degree.

